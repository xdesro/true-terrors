<script webc:setup>
    console.log('test');

    function getTime() {
        return new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })
    }
</script>
<!-- <marquee class="home-hero__marquee"> -->
<!-- <div class="home-hero__marquee"> -->
<div class="home-hero__marquee-inner" webc:for="n in [1,2]">
    <div class="spotify-widget">
        <a href="https://open.spotify.com/user/1239993406?si=tpFk1Vt5Q_yH6qM0E8wjXA">
            <svg fill="currentColor" aria-label="Go to my Spotify profile" viewBox="0 0 12 12" width="12">
                <path
                    d="M6 0C2.7 0 0 2.7 0 6s2.7 6 6 6 6-2.7 6-6a6 6 0 00-6-6zm2.76 8.67c-.12.18-.33.24-.51.12-1.41-.87-3.18-1.05-5.28-.57-.21.06-.39-.09-.45-.27-.06-.21.09-.39.27-.45 2.28-.51 4.26-.3 5.82.66.21.09.24.33.15.51zm.72-1.65c-.15.21-.42.3-.63.15a7.78 7.78 0 00-5.97-.69c-.24.06-.51-.06-.57-.3-.06-.24.06-.51.3-.57a8.78 8.78 0 016.75.81c.18.1.27.39.12.6zm.06-1.68C7.62 4.2 4.41 4.08 2.58 4.65c-.3.09-.6-.09-.69-.36-.09-.3.09-.6.36-.7 2.13-.62 5.64-.5 7.86.82.27.15.36.51.21.78-.15.21-.51.3-.78.15z" />
            </svg>
        </a>
        <div webc:if="recentListening && recentListening.url" class="spotify-widget__inner">
            <a class="spotify-widget__track" :href="recentListening.url" @text="recentListening.name"></a>,
            <span class="spotify-widget__artists">
                <span webc:for="(artist, index) of recentListening.artists" @text="artist.name.trim()">
                    <span webc:nokeep webc:if="index + 1 < recentListening.artists.length">,&nbsp;</span>
                </span>
            </span>
        </div>
    </div> —
    <span>48ºF @ N 39º 43’ 31.56” W 104º 58’ 0.94” (Denver, Colorado)</span> —
    <span data-tag="currentTime" @text="getTime()">11:03AM</span> —
</div>
<!-- </marquee> -->
<!-- </div> -->
<script webc:keep type="module">
    import { gsap } from '/js/vendor/gsap/esm/index.js';
    import { Observer } from '/js/vendor/gsap/esm/Observer.js';
    gsap.registerPlugin(Observer)

    const marquee = document.querySelector('.home-hero__marquee');

    const scrollingText = gsap.utils.toArray('.home-hero__marquee-inner');

    const tl = horizontalLoop(scrollingText, {
        duration: 10,
        repeat: -1,
        speed: .2
    });

    marquee.addEventListener('mouseover', e => {
        // tl.pause();
        tl.timeScale(.2)
    })
    marquee.addEventListener('mouseout', e => {
        // tl.play();
        tl.timeScale(2)
    })

    /*
This helper function makes a group of elements animate along the x-axis in a seamless, responsive loop.

Features:
 - Uses xPercent so that even if the widths change (like if the window gets resized), it should still work in most cases.
 - When each item animates to the left or right enough, it will loop back to the other side
 - Optionally pass in a config object with values like "speed" (default: 1, which travels at roughly 100 pixels per second), paused (boolean),  repeat, reversed, and paddingRight.
 - The returned timeline will have the following methods added to it:
   - next() - animates to the next element using a timeline.tweenTo() which it returns. You can pass in a vars object to control duration, easing, etc.
   - previous() - animates to the previous element using a timeline.tweenTo() which it returns. You can pass in a vars object to control duration, easing, etc.
   - toIndex() - pass in a zero-based index value of the element that it should animate to, and optionally pass in a vars object to control duration, easing, etc. Always goes in the shortest direction
   - current() - returns the current index (if an animation is in-progress, it reflects the final index)
   - times - an Array of the times on the timeline where each element hits the "starting" spot. There's also a label added accordingly, so "label1" is when the 2nd element reaches the start.
 */
    function horizontalLoop(items, config) {
        items = gsap.utils.toArray(items);
        config = config || {};
        let tl = gsap.timeline({ repeat: config.repeat, paused: config.paused, defaults: { ease: "none" }, onReverseComplete: () => tl.totalTime(tl.rawTime() + tl.duration() * 100) }),
            length = items.length,
            startX = items[0].offsetLeft,
            times = [],
            widths = [],
            xPercents = [],
            curIndex = 0,
            pixelsPerSecond = (config.speed || 1) * 100,
            snap = config.snap === false ? v => v : gsap.utils.snap(config.snap || 1), // some browsers shift by a pixel to accommodate flex layouts, so for example if width is 20% the first element's width might be 242px, and the next 243px, alternating back and forth. So we snap to 5 percentage points to make things look more natural
            totalWidth, curX, distanceToStart, distanceToLoop, item, i;
        gsap.set(items, { // convert "x" to "xPercent" to make things responsive, and populate the widths/xPercents Arrays to make lookups faster.
            xPercent: (i, el) => {
                let w = widths[i] = parseFloat(gsap.getProperty(el, "width", "px"));
                xPercents[i] = snap(parseFloat(gsap.getProperty(el, "x", "px")) / w * 100 + gsap.getProperty(el, "xPercent"));
                return xPercents[i];
            }
        });
        gsap.set(items, { x: 0 });
        totalWidth = items[length - 1].offsetLeft + xPercents[length - 1] / 100 * widths[length - 1] - startX + items[length - 1].offsetWidth * gsap.getProperty(items[length - 1], "scaleX") + (parseFloat(config.paddingRight) || 0);
        for (i = 0; i < length; i++) {
            item = items[i];
            curX = xPercents[i] / 100 * widths[i];
            distanceToStart = item.offsetLeft + curX - startX;
            distanceToLoop = distanceToStart + widths[i] * gsap.getProperty(item, "scaleX");
            tl.to(item, { xPercent: snap((curX - distanceToLoop) / widths[i] * 100), duration: distanceToLoop / pixelsPerSecond }, 0)
                .fromTo(item, { xPercent: snap((curX - distanceToLoop + totalWidth) / widths[i] * 100) }, { xPercent: xPercents[i], duration: (curX - distanceToLoop + totalWidth - curX) / pixelsPerSecond, immediateRender: false }, distanceToLoop / pixelsPerSecond)
                .add("label" + i, distanceToStart / pixelsPerSecond);
            times[i] = distanceToStart / pixelsPerSecond;
        }
        function toIndex(index, vars) {
            vars = vars || {};
            (Math.abs(index - curIndex) > length / 2) && (index += index > curIndex ? -length : length); // always go in the shortest direction
            let newIndex = gsap.utils.wrap(0, length, index),
                time = times[newIndex];
            if (time > tl.time() !== index > curIndex) { // if we're wrapping the timeline's playhead, make the proper adjustments
                vars.modifiers = { time: gsap.utils.wrap(0, tl.duration()) };
                time += tl.duration() * (index > curIndex ? 1 : -1);
            }
            curIndex = newIndex;
            vars.overwrite = true;
            return tl.tweenTo(time, vars);
        }
        tl.next = vars => toIndex(curIndex + 1, vars);
        tl.previous = vars => toIndex(curIndex - 1, vars);
        tl.current = () => curIndex;
        tl.toIndex = (index, vars) => toIndex(index, vars);
        tl.times = times;
        tl.progress(1, true).progress(0, true); // pre-render for performance
        if (config.reversed) {
            tl.vars.onReverseComplete();
            tl.reverse();
        }
        return tl;
    }


    const currentTimeCells = document.querySelectorAll('[data-tag="currentTime"]');

    setInterval(() => {
        currentTimeCells.forEach(currentTimeCell => {
            currentTimeCell.textContent = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })
        }
        )
    }, 60000)
</script>